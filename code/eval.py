import nltk
import numpy as np
import models
import utils

def read_info(infile="../eval/speech_composition.txt"):
    '''Read in speech_composition.txt and output dictionary of the form:
    {doc_id:doc_path}
    '''
    docs = {}
    with open(infile, "r") as content:
        header = content.next()
        for line in content:
            data = line.strip("\n").split("\t")
            doc_id = int(data[0])
            docs[doc_id] = data[1].split("/")[-1]
    return docs

def read_tags(infile="../eval/speech_keys.txt", doc_keys=read_info()):
    '''Reads in tags generated by Mallet and outputs dictionary of the form:
    {doc_id:[doc_path, [tags]]}
    '''
    doc_tags = {}
    with open(infile, "r")as content:
        for line in content:
            data = line.strip().split("\t")
            doc_id = int(data[0])
            tags = data[2:][0].split(" ")
            doc_tags[doc_id] = [doc_keys[doc_id], tags]
    return doc_tags

def precision(predicted_tags, tags):
    rel_tags = 0.0
    ret_tags = len(predicted_tags)
    for pt in predicted_tags:
        if pt in tags:
            rel_tags += 1.0
    return rel_tags/ret_tags

def recall(predicted_tags, tags):
    rel_tags = 0.0
    ret_tags = len(predicted_tags)
    for pt in predicted_tags:
        if pt in tags:
            rel_tags += 1.0
    return ret_tags/rel_tags

def avg_precison(speech_tags, actual_tags=read_tags()):
    precision_sum = 0.0
    for i in range(len(speech_tags)):
        p = precision(speech_tags[i], actual_tags[i])
        precision_sum += p
    return precision_sum/len(speech_tags)

def avg_recall(speech_tags, actual_tags=read_tags()):
    recall_sum = 0.0
    for i in range(len(speech_tags)):
        r = recall(speech_tags[i], actual_tags[i])
        recall_sum += r
    return recall_sum/len(speech_tags)

def compute_pr(model):
    '''Takes in a model to produce tags, then evaluates PR of model'''
    print "Evaluating %s" % (model)
    (vocab, tf) = utils.read_corpus()
    top_words = models.run_model(model, vocab, tf)
    average_recall = avg_recall(top_words)
    avgerage_precision = avg_precision(top_words)
    print "Average Precision: %f" %(avg_precision)
    print "Average Precision: %f" %(avg_precision)

if __name__ == '__main__':
    compute_pr("tfidf")